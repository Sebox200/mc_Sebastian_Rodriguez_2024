{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sebox200/mc_Sebastian_Rodriguez_2024/blob/main/Taller%2014\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def leer_vector(n):\n",
        "    \"\"\"\n",
        "    Función para leer un vector de longitud n desde la entrada estándar.\n",
        "    \"\"\"\n",
        "    vector = []\n",
        "    print(f\"Ingrese los {n} elementos del vector separados por espacios:\")\n",
        "    entrada = input().strip().split()\n",
        "\n",
        "\n",
        "    for num in entrada:\n",
        "        vector.append(float(num))\n",
        "\n",
        "\n",
        "    if len(vector) != n:\n",
        "        raise ValueError(f\"Se esperaban {n} elementos en el vector.\")\n",
        "\n",
        "    return vector\n",
        "\n",
        "def producto_escalar(u, v):\n",
        "    \"\"\"\n",
        "    Función para calcular el producto escalar de dos vectores u y v de la misma longitud.\n",
        "    \"\"\"\n",
        "    if len(u) != len(v):\n",
        "        raise ValueError(\"Los vectores deben ser de la misma longitud.\")\n",
        "\n",
        "    producto = 0\n",
        "    for i in range(len(u)):\n",
        "        producto += u[i] * v[i]\n",
        "\n",
        "    return producto\n",
        "\n",
        "def main():\n",
        "    try:\n",
        "\n",
        "        n = int(input(\"Ingrese la longitud de los vectores: \"))\n",
        "\n",
        "\n",
        "        print(\"\\nVector u:\")\n",
        "        u = leer_vector(n)\n",
        "\n",
        "\n",
        "        print(\"\\nVector v:\")\n",
        "        v = leer_vector(n)\n",
        "\n",
        "\n",
        "        resultado = producto_escalar(u, v)\n",
        "\n",
        "\n",
        "        print(f\"\\nEl producto escalar de los vectores u y v es: {resultado}\")\n",
        "\n",
        "    except ValueError as ve:\n",
        "        print(f\"Error: {ve}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Ocurrió un error: {e}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "QgBleVDRZP1J",
        "outputId": "3b364c70-e82f-49db-ebee-765877378a77",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese la longitud de los vectores: 5\n",
            "\n",
            "Vector u:\n",
            "Ingrese los 5 elementos del vector separados por espacios:\n",
            "7\n",
            "Error: Se esperaban 5 elementos en el vector.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def leer_matriz(filas, columnas):\n",
        "    \"\"\"\n",
        "    Función para leer una matriz desde la entrada estándar.\n",
        "    \"\"\"\n",
        "    matriz = []\n",
        "    print(f\"Ingrese los elementos de la matriz ({filas}x{columnas}) separados por espacios:\")\n",
        "\n",
        "    for i in range(filas):\n",
        "        fila = []\n",
        "        entrada = input().strip().split()\n",
        "\n",
        "\n",
        "        for num in entrada:\n",
        "            fila.append(float(num))\n",
        "\n",
        "\n",
        "        if len(fila) != columnas:\n",
        "            raise ValueError(f\"Se esperaban {columnas} elementos en la fila {i+1}.\")\n",
        "\n",
        "        matriz.append(fila)\n",
        "\n",
        "    return matriz\n",
        "\n",
        "def mostrar_matriz(matriz):\n",
        "    \"\"\"\n",
        "    Función para mostrar una matriz en forma legible.\n",
        "    \"\"\"\n",
        "    for fila in matriz:\n",
        "        print(' '.join(str(elem) for elem in fila))\n",
        "\n",
        "def multiplicar_por_escalar(matriz, escalar):\n",
        "    \"\"\"\n",
        "    Función para multiplicar una matriz por un escalar.\n",
        "    \"\"\"\n",
        "    resultado = [[elem * escalar for elem in fila] for fila in matriz]\n",
        "    return resultado\n",
        "\n",
        "def sumar_matrices(matriz1, matriz2):\n",
        "    \"\"\"\n",
        "    Función para sumar dos matrices del mismo tamaño.\n",
        "    \"\"\"\n",
        "    if len(matriz1) != len(matriz2) or len(matriz1[0]) != len(matriz2[0]):\n",
        "        raise ValueError(\"Las matrices deben tener las mismas dimensiones para poder sumarse.\")\n",
        "\n",
        "    resultado = [[matriz1[i][j] + matriz2[i][j] for j in range(len(matriz1[0]))] for i in range(len(matriz1))]\n",
        "    return resultado\n",
        "\n",
        "def multiplicar_matrices(matriz1, matriz2):\n",
        "    \"\"\"\n",
        "    Función para multiplicar dos matrices (matriz2 × matriz1).\n",
        "    \"\"\"\n",
        "    if len(matriz1[0]) != len(matriz2):\n",
        "        raise ValueError(\"El número de columnas de la matriz 1 debe ser igual al número de filas de la matriz 2 para la multiplicación.\")\n",
        "\n",
        "\n",
        "    resultado = [[0] * len(matriz1[0]) for _ in range(len(matriz2))]\n",
        "\n",
        "\n",
        "    for i in range(len(matriz1)):\n",
        "        for j in range(len(matriz2[0])):\n",
        "            for k in range(len(matriz2)):\n",
        "                resultado[i][j] += matriz2[i][k] * matriz1[k][j]\n",
        "\n",
        "    return resultado\n",
        "\n",
        "def main():\n",
        "    try:\n",
        "\n",
        "        filas_A = int(input(\"Ingrese el número de filas de la matriz A: \"))\n",
        "        columnas_A = int(input(\"Ingrese el número de columnas de la matriz A: \"))\n",
        "\n",
        "\n",
        "        print(\"\\nIngrese la matriz A:\")\n",
        "        A = leer_matriz(filas_A, columnas_A)\n",
        "\n",
        "\n",
        "        filas_B = int(input(\"\\nIngrese el número de filas de la matriz B: \"))\n",
        "        columnas_B = int(input(\"Ingrese el número de columnas de la matriz B: \"))\n",
        "\n",
        "\n",
        "        print(\"\\nIngrese la matriz B:\")\n",
        "        B = leer_matriz(filas_B, columnas_B)\n",
        "\n",
        "\n",
        "        print(\"\\nMatriz A:\")\n",
        "        mostrar_matriz(A)\n",
        "        print(\"\\nMatriz B:\")\n",
        "        mostrar_matriz(B)\n",
        "\n",
        "\n",
        "        print(\"\\nOperaciones:\")\n",
        "        print(\"a) 3A:\")\n",
        "        resultado_a = multiplicar_por_escalar(A, 3)\n",
        "        mostrar_matriz(resultado_a)\n",
        "\n",
        "        print(\"\\nb) 4B:\")\n",
        "        resultado_b = multiplicar_por_escalar(B, 4)\n",
        "        mostrar_matriz(resultado_b)\n",
        "\n",
        "        print(\"\\nc) A + B:\")\n",
        "        resultado_c = sumar_matrices(A, B)\n",
        "        mostrar_matriz(resultado_c)\n",
        "\n",
        "        print(\"\\nd) B × A:\")\n",
        "        resultado_d = multiplicar_matrices(B, A)\n",
        "        mostrar_matriz(resultado_d)\n",
        "\n",
        "    except ValueError as ve:\n",
        "        print(f\"Error: {ve}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Ocurrió un error: {e}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "qKpK2lGaZi1s"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Te damos la bienvenida a Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}